#!/usr/bin/env node

/**
 * Aiven Database Setup Helper
 * 
 * This script helps you set up your Aiven MySQL database connection
 * and test the configuration.
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function question(query) {
    return new Promise(resolve => rl.question(query, resolve));
}

async function main() {
    console.log('╔════════════════════════════════════════════════════════════╗');
    console.log('║         Aiven MySQL Database Setup Helper                 ║');
    console.log('╚════════════════════════════════════════════════════════════╝\n');

    console.log('This script will help you configure your Aiven database connection.\n');

    // Check if .env already exists
    const envPath = path.join(__dirname, '.env');
    const envExamplePath = path.join(__dirname, '.env.example');
    
    if (fs.existsSync(envPath)) {
        const overwrite = await question('⚠️  .env file already exists. Overwrite? (y/N): ');
        if (overwrite.toLowerCase() !== 'y') {
            console.log('Setup cancelled. Your existing .env file was not modified.');
            rl.close();
            return;
        }
    }

    console.log('\n📝 Please provide your Aiven database credentials:\n');

    // Get database credentials
    const dbHost = await question('DB Host (e.g., mysql-xxx.aivencloud.com): ');
    const dbPort = await question('DB Port (e.g., 16780): ');
    const dbUser = await question('DB User (default: avnadmin): ') || 'avnadmin';
    const dbPassword = await question('DB Password: ');
    const dbName = await question('DB Name (default: defaultdb): ') || 'defaultdb';

    console.log('\n📜 SSL Certificate Setup:\n');
    console.log('You have two options for the CA certificate:\n');
    console.log('1. Store the ca.pem file locally (recommended for development)');
    console.log('2. Skip for now (you can add it later)\n');

    const certOption = await question('Choose option (1 or 2): ');

    let certPath = '';
    if (certOption === '1') {
        const defaultCertPath = 'server/certs/ca.pem';
        certPath = await question(`Path to ca.pem file (default: ${defaultCertPath}): `) || defaultCertPath;
        
        // Create certs directory if it doesn't exist
        const certsDir = path.join(__dirname, 'certs');
        if (!fs.existsSync(certsDir)) {
            fs.mkdirSync(certsDir, { recursive: true });
            console.log(`✅ Created directory: ${certsDir}`);
        }

        // Check if certificate file exists
        const fullCertPath = path.resolve(certPath);
        if (!fs.existsSync(fullCertPath)) {
            console.log(`\n⚠️  Certificate file not found at: ${fullCertPath}`);
            console.log('Please copy your ca.pem file to this location before testing the connection.');
        }
    }

    // Create .env file
    const envContent = `# =====================================================
# SHOOTING RANGE DASHBOARD - ENVIRONMENT CONFIGURATION
# Generated by setup_aiven.js
# =====================================================

# Aiven MySQL Database Configuration
DB_HOST=${dbHost}
DB_USER=${dbUser}
DB_PASSWORD=${dbPassword}
DB_NAME=${dbName}
DB_PORT=${dbPort}
DB_SSL=true
${certPath ? `DB_CA_CERT_PATH=${certPath}` : '# DB_CA_CERT_PATH=server/certs/ca.pem  # Add your certificate path here'}

# Server Configuration
PORT=3001
NODE_ENV=development

# Security Configuration (CHANGE THESE IN PRODUCTION!)
JWT_SECRET=your_jwt_secret_key_here_${Math.random().toString(36).substring(7)}
SESSION_SECRET=your_session_secret_here_${Math.random().toString(36).substring(7)}

# CORS Configuration
ALLOWED_ORIGINS=http://localhost:5173,http://localhost:3000

# Rate Limiting
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# Logging
LOG_LEVEL=info
LOG_FILE=logs/shooting_range.log
`;

    fs.writeFileSync(envPath, envContent);
    console.log(`\n✅ Created .env file at: ${envPath}\n`);

    // Test connection
    console.log('🔌 Testing database connection...\n');
    
    try {
        require('dotenv').config({ path: envPath });
        const { testConnection } = require('./database_config_serverless');
        
        const connected = await testConnection();
        
        if (connected) {
            console.log('\n🎉 Success! Your database connection is working!\n');
            console.log('Next steps:');
            console.log('1. Initialize the database schema:');
            console.log('   cd server && node test_database.js\n');
            console.log('2. Start the development server:');
            console.log('   cd server && npm start\n');
            console.log('3. For Vercel deployment, see: server/AIVEN_SETUP_GUIDE.md\n');
        } else {
            console.log('\n❌ Connection failed. Please check your credentials and try again.\n');
            console.log('Troubleshooting tips:');
            console.log('- Verify your database credentials are correct');
            console.log('- Ensure the CA certificate is in the correct location');
            console.log('- Check that your IP is allowed in Aiven firewall settings');
            console.log('- See server/AIVEN_SETUP_GUIDE.md for more help\n');
        }
    } catch (error) {
        console.log('\n❌ Error testing connection:', error.message);
        console.log('\nThe .env file was created, but connection test failed.');
        console.log('Please check the configuration and try again.\n');
    }

    rl.close();
}

main().catch(error => {
    console.error('Error:', error);
    rl.close();
    process.exit(1);
});

